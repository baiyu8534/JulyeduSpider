{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}{"quesInfo":{"id":919,"ques":"请详细说说支持向量机（support vector machine，SVM）的原理","analysis":"本题解析来源于July在CSDN上阅读量超过80万的SVM笔记：《支持向量机通俗导论（理解SVM的三层境界）》。\r\n这篇笔记是对SVM很棒的中文通俗综述，特原封不动的刊载全文。\r\n\r\n作者：July 。致谢：pluskid、白石、JerryLead。\r\n说明：本文最初写于2012年6月，而后不断反反复复修改&优化，修改次数达上百次，最后修改于2016年11月。\r\n声明：本文于2012年便早已附上所有参考链接，并注明是篇“学习笔记”，且写明具体参考了pluskid等人的文章。文末2013年的PDF是为证。\r\n\r\n\r\n前言\r\n    动笔写这个支持向量机(support vector machine)是费了不少劲和困难的，原因很简单，一者这个东西本身就并不好懂，要深入学习和研究下去需花费不少时间和精力，二者这个东西也不好讲清楚，尽管网上已经有朋友写得不错了(见文末参考链接)，但在描述数学公式的时候还是显得不够。得益于同学白石的数学证明，我还是想尝试写一下，希望本文在兼顾通俗易懂的基础上，真真正正能足以成为一篇完整概括和介绍支持向量机的导论性的文章。\r\n\r\n    本文在写的过程中，参考了不少资料，包括《支持向量机导论》、《统计学习方法》及网友pluskid的支持向量机系列等等，于此，还是一篇学习笔记，只是加入了自己的理解和总结，有任何不妥之处，还望海涵。全文宏观上整体认识支持向量机的概念和用处，微观上深究部分定理的来龙去脉，证明及原理细节，力保逻辑清晰 & 通俗易懂。\r\n\r\n    同时，阅读本文时建议大家尽量使用chrome等浏览器，如此公式才能更好的显示，再者，阅读时可拿张纸和笔出来，把本文所有定理.公式都亲自推导一遍或者直接打印下来（可直接打印网页版或本文文末附的PDF）在文稿上演算，从而享受随时随地思考、演算的极致快感。\r\n\r\n    OK，还是那句话，有任何问题，欢迎任何人随时不吝指正 & 赐教，感谢。\r\n\r\n\r\n第一层、了解SVM\r\n\r\n    支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。\r\n\r\n1.1、分类标准的起源：Logistic回归\r\n\r\n    理解SVM，咱们必须先弄清楚一个概念：线性分类器。\r\n\r\n    给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyper plane），这个超平面的方程可以表示为（ wT中的T代表转置）：\r\n                  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113051365318935.png'\/>                                          \r\n    可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。\r\n\r\n    Logistic回归目的是从特征学习出一个0\/1分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic函数（或称作sigmoid函数）将自变量映射到(0,1)上，映射后的值被认为是属于y=1的概率。\r\n\r\n    假设函数\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113053016104068.png'\/>\r\n\r\n 其中x是n维特征向量，函数g就是logistic函数。\r\n\r\n而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113058376738630.png'\/>的图像是\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113059843083795.png'\/>\r\n\r\n可以看到，将无穷映射到了(0,1)。\r\n\r\n    而假设函数就是特征属于y=1的概率。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113061669593727.png'\/>\r\n\r\n 从而，当我们要判别一个新来的特征属于哪个类时，只需求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146364378058195.png'\/>即可，若<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146365338823493.png'\/>大于0.5就是y=1的类，反之属于y=0类。\r\n\r\n    此外，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146366692503105.png'\/>只和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146367415023245.png'\/>有关，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146368795218482.png'\/>>0，那么<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146370832815720.png'\/>，而g(z)只是用来映射，真实的类别决定权还是在于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637253021164.png'\/>。再者，当<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146378422355081.png'\/>时，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314637978019997.png'\/>=1，反之<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146381554960691.png'\/>=0。如果我们只从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146383567813173.png'\/>出发，希望模型达到的目标就是让训练数据中y=1的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146385429352300.png'\/>，而是y=0的特征<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146387248291534.png'\/>。Logistic回归就是要学习得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146388994157463.png'\/>，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。\r\n\r\n    接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146391463554529.png'\/>）中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146392850792182.16'\/>替换为b，最后将后面的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146394394156932.png'\/>替换为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146396152530802.png'\/>（即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639746664899.png'\/>）。如此，则有了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314639881147226.png'\/>。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146401476601530.png'\/>没区别。\r\n\r\n    进一步，可以将假设函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146403033616466.png'\/>中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113064521949053.jpg'\/>\r\n\r\n1.2、线性分类的一个例子\r\n\r\n    下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113066373124322.png'\/>\r\n\r\n 这个超平面可以用分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146431023007959.1'\/>表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146432382523181.2'\/>\r\n\r\n    注：有的资料上定义特征到结果的输出函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146434189562476.3'\/>，与这里定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146435371483794.4'\/>实质是一样的。为什么？因为无论是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146436741121518.5'\/>，还是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146437628763751.6'\/>，不影响最终优化结果。下文你将看到，当我们转化到优化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146439380124485.jpg'\/>的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1\/||w||已无影响。\r\n\r\n    （有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146442974749567.8'\/>=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）\r\n\r\n换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。\r\n\r\n    接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。\r\n\r\n1.3、函数间隔Functional margin与几何间隔Geometrical margin \r\n\r\n    在超平面w*x+b=0确定的情况下，|w*x+b|能够表示点x到距离超平面的远近，而通过观察w*x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y*(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。\r\n\r\n 定义函数间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146485297373437.1'\/>表示）为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314648635908217.2'\/>\r\n\r\n    而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：\r\n\r\n  \t  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146489059937090.3'\/>= min<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146490864820322.4'\/>i  (i=1，...n)\r\n\r\n    但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。\r\n\r\n    事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离--几何间隔（geometrical margin）的概念。\r\n\r\n    假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493065066186.5'\/>为样本x到超平面的距离，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146493788072777.png'\/>\r\n\r\n    根据平面几何知识，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146494615195883.7'\/>\r\n\r\n其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146502145969056.8'\/>是单位向量（一个向量除以它的模称之为单位向量）。\r\n\r\n    又由于  是超平面上的点，满足  ，代入超平面的方程<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146505417151663.9'\/>，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146506534548953.10'\/>，即<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146507565022059.11'\/>。\r\n\r\n    随即让此式<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146509278878076.12'\/>的两边同时乘以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146510447967191.13'\/>，再根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146512312795108.14'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146513125317319.15'\/>，即可算出γ： \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146514490423627.16'\/>\t\t\t\t\t\t\t\r\n\r\n    为了得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146516422419628.17'\/>的绝对值，令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314651761421900.18'\/>乘上对应的类别 y，即可得出几何间隔（用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146518950402437.19'\/>表示）的定义：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146520247792054.20'\/>\t\t\t\t\t\t\t\r\n\r\n  从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y*(wx+b) = y*f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|\/||w||才是直观上的点到超平面的距离。\r\n\r\n1.4、最大间隔分类器Maximum Margin Classifier的定义\r\n\r\n    对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113279919672178.16'\/>\r\n\r\n通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146559329600882.1'\/>的值任意大，亦即函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146560492477215.2'\/>可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146562566574243.3'\/>，使得在缩放w和b的时候几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146564311033967.4'\/>的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。\r\n\r\n   于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：\r\n\r\n    同时需满足一些条件，根据间隔的定义，有\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146565731873785.jpg'\/>\r\n\r\n    其中，s.t.，即subject to的意思，它导出的是约束条件。\r\n\r\n\r\n    回顾下几何间隔的定义<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146567636364773.6'\/>，可知：如果令函数间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314656883697648.7'\/>等于1（之所以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314657015793485.8'\/>等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146572085183649.9'\/> = 1 \/ ||w||且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146574438659523.10'\/>，从而上述目标函数转化成了\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146575452664382.jpg'\/>\r\n\r\n    相当于在相应的约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146577151103656.12'\/>下，最大化这个1\/||w||值，而1\/||w||便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146578732898268.13'\/>。   \r\n\r\n    如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146580812374832.14'\/>，两条虚线间隔边界之间的距离等于2<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314659455416140.15'\/>，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146596136753600.16'\/>（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146597523310363.17'\/>，而对于所有不是支持向量的点，则显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146599080556301.18'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146600753846885.19'\/>\r\n\r\n  OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。\r\n\r\n\r\n第二层、深入SVM\r\n\r\n2.1、从线性可分到线性不可分\r\n\r\n2.1.1、从原始问题到对偶问题的求解\r\n\r\n    接着考虑之前得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113312088690993.jpg'\/>\r\n\r\n 由于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146617421202746.png'\/>的最大值相当于求<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146618157406717.png'\/>的最小值，所以上述目标函数等价于（w由分母变成分子，从而也有原来的max问题变为min问题，很明显，两者问题等价）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113314522131389.jpg'\/>\r\n\r\n  因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。\r\n\r\n    此外，由于这个问题的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与原问题等价的对偶问题（dual problem）得到原始问题的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。\r\n\r\n     那什么是拉格朗日对偶性呢？简单来讲，通过给每一个约束条件加上一个拉格朗日乘子（Lagrange multiplier），定义拉格朗日函数（通过拉格朗日函数将约束条件融合到目标函数里去，从而只用一个函数表达式便能清楚的表达出我们的问题）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113316542319733.jpg'\/>\r\n\r\n  然后令\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146650222443611.jpg'\/>\r\n\r\n    容易验证，当某个约束条件不满足时，例如<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665172738761.2'\/>，那么显然有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314665269657918.3'\/>（只要令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146653715316175.4'\/>即可）。而当所有约束条件都满足时，则最优值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146655381485886.5'\/>，亦即最初要最小化的量。\r\n\r\n    因此，在要求约束条件得到满足的情况下最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146656510236423.6'\/>，实际上等价于直接最小化<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146657871773236.7'\/>（当然，这里也有约束条件，就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146659426571630.8'\/>）   ，因为如果约束条件没有得到满足，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146660849234466.9'\/>会等于无穷大，自然不会是我们所要求的最小值。\r\n\r\n    具体写出来，目标函数变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146662090854543.jpg'\/>\r\n\r\n    这里用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146663180782414.11'\/>表示这个问题的最优值，且和最初的问题是等价的。如果直接求解，那么一上来便得面对w和b两个参数，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146664838273177.12'\/>又是不等式约束，这个求解过程不好做。不妨把最小和最大的位置交换一下，变成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146665786089049.jpg'\/>\r\n\r\n    交换以后的新问题是原始问题的对偶问题，这个新问题的最优值用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146667419566632.14'\/>来表示。而且有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146668835519226.15'\/>≤<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146669722322683.16'\/>，在满足某些条件的情况下，这两者相等，这个时候就可以通过求解对偶问题来间接地求解原始问题。\r\n\r\n    换言之，之所以从minmax的原始问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146671571238195.17'\/>，转化为maxmin的对偶问题<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146672481557375.18'\/>，一者因为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146673617253794.19'\/>是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146674625255937.20'\/>的近似解，二者，转化为对偶问题后，更容易求解。\r\n\r\n    下面可以先求L 对w、b的极小，再求L 对的极大。\r\n\r\n2.1.2、KKT条件\r\n    上文中提到“≤在满足某些条件的情况下，两者等价”，这所谓的“满足某些条件”就是要满足KKT条件。\r\n\r\n    勘误：经读者qq_28543029指出，这里的条件不应该是KKT条件，要让两者等价需满足strong duality （强对偶），而后有学者在强对偶下提出了KKT条件，且KKT条件的成立要满足constraint qualifications，而constraint qualifications之一就是Slater条件。所谓Slater 条件，即指：凸优化问题，如果存在一个点x，使得所有等式约束都成立，并且所有不等式约束都严格成立（即取严格不等号，而非等号），则满足Slater 条件。对于此处，Slater 条件成立，所以d*≤p*可以取等号。\r\n \r\n   一般地，一个最优化数学模型能够表示成下列标准形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146718330270963.jpg'\/>\r\n\r\n 其中，f(x)是需要最小化的函数，h(x)是等式约束，g(x)是不等式约束，p和q分别为等式约束和不等式约束的数量。\r\n\r\n    同时，得明白以下两点：\r\n\r\n*凸优化的概念：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146824623866588.png'\/>为一凸集， <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146825672673199.png'\/>为一凸函数。凸优化就是要找出一点 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146826572706876.png'\/>，使得每一<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146827422019435.png'\/>满足 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146828463538991.png'\/>。\r\n*KKT条件的意义：它是一个非线性规划（Nonlinear Programming）问题能有最优化解法的必要和充分条件。\r\n    \r\n而KKT条件就是指上面最优化数学模型的标准形式中的最小点 x* 必须满足下面的条件：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146730763266014.jpg'\/>\r\n\r\n    经过论证，我们这里的问题是满足 KKT 条件的（首先已经满足Slater条件，再者f和gi也都是可微的，即L对w和b都可导），因此现在我们便转化为求解第二个问题。\r\n\r\n    也就是说，原始问题通过满足KKT条件，已经转化成了对偶问题。而求解这个对偶学习问题，分为3个步骤：首先要让L(w，b，a) 关于 w 和 b 最小化，然后求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146814953612420.1'\/>的极大，最后利用SMO算法求解对偶问题中的拉格朗日乘子。\r\n\r\n2.1.3、对偶问题求解的3个步骤\r\n    （1）、首先固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314673262981862.8'\/>，要让 L 关于 w 和 b 最小化，我们分别对w，b求偏导数，即令 ∂L\/∂w 和 ∂L\/∂b 等于零（对w求导结果的解释请看本文评论下第45楼回复）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146815931001930.2'\/>\t\t\t\t\t\t\t\r\n\r\n    将以上结果代入之前的L \r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146739619384446.jpg'\/>\r\n\r\n得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113425916148387.jpg'\/>\r\n\r\n 提醒：有读者可能会问上述推导过程如何而来？说实话，其具体推导过程是比较复杂的，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113427379740069.png'\/>\r\n\r\n 最后，得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311342925531218.jpg'\/>\r\n\r\n如 jerrylead所说：“倒数第4步”推导到“倒数第3步”使用了线性代数的转置运算，由于ai和yi都是实数，因此转置后与自身一样。“倒数第3步”推导到“倒数第2步”使用了(a+b+c+…)(a+b+c+…)=aa+ab+ac+ba+bb+bc+…的乘法运算法则。最后一步是上一步的顺序调整。\r\n\r\n    从上面的最后一个式子，我们可以看出，此时的拉格朗日函数只包含了一个变量，那就是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772067454676.1'\/>（求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146772840351144.2'\/>便能求出w，和b，由此可见，上文第1.2节提出来的核心问题：分类函数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314677417483233.3'\/>也就可以轻而易举的求出来了）。\r\n\r\n    （2）、求对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146775284702996.4'\/>的极大，即是关于对偶问题的最优化问题。经过上面第一个步骤的求w和b，得到的拉格朗日函数式子已经没有了变量w，b，只有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146776611739562.5'\/>。从上面的式子得到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146777524070410.jpg'\/>\r\n\r\n    这样，求出了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146778392099834.7'\/>，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146781517913549.jpg'\/>，即可求出w，然后通过<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146782435826414.png'\/>，即可求出b，最终得出分离超平面和分类决策函数。\r\n\r\n    （3）在求得L(w, b, a) 关于 w 和 b 最小化，以及对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146784722148748.10'\/>的极大之后，最后一步则可以利用SMO算法求解对偶问题中的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146786027672661.11'\/>。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146787393950612.jpg'\/>\r\n\r\n上述式子要解决的是在参数上求最大值W的问题，至于和都是已知数。要了解这个SMO算法是如何推导的，请跳到下文第3.5节、SMO算法。\r\n    到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，下面我们将引入核函数，进而推广到非线性分类问题。\r\n\r\n2.1.5、线性不可分的情况\r\n\r\n    OK，为过渡到下节2.2节所介绍的核函数，让我们再来看看上述推导过程中得到的一些有趣的形式。首先就是关于我们的 hyper plane ，对于一个数据点  进行分类，实际上是通过把  带入到 <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113454230240950.001'\/>算出结果然后根据其正负号来进行类别划分的。而前面的推导中我们得到\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113461774769629.001-'\/>\r\n\r\n  因此分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113455295794522.jpg'\/> \r\n\r\n  这里的形式的有趣之处在于，对于新点 x的预测，只需要计算它与训练数据点的内积即可（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113467522012459.002-'\/>表示向量内积），这一点至关重要，是之后使用 Kernel 进行非线性推广的基本前提。此外，所谓 Supporting Vector 也在这里显示出来——事实上，所有非Supporting Vector 所对应的系数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113470398170816.003'\/>都是等于零的，因此对于新点的内积计算实际上只要针对少量的“支持向量”而不是所有的训练数据即可。\r\n\r\n    为什么非支持向量对应的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113472219812427.004'\/>等于零呢？直观上来理解的话，就是这些“后方”的点——正如我们之前分析过的一样，对超平面是没有影响的，由于分类完全有超平面决定，所以这些无关的点并不会参与分类问题的计算，因而也就不会产生任何影响了。\r\n\r\n    回忆一下我们2.1.1节中通过 Lagrange multiplier得到的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113487285625495.jpg'\/>\r\n\r\n 注意到如果  是支持向量的话，上式中红颜色的部分是等于 0 的（因为支持向量的 functional margin 等于 1 ），而对于非支持向量来说，functional margin 会大于 1 ，因此红颜色部分是大于零的，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113482593918865.006'\/>又是非负的，为了满足最大化，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113484223224415.007'\/>必须等于 0 。这也就是这些非Supporting Vector 的点的局限性。 \r\n\r\n    至此，我们便得到了一个maximum margin hyper plane classifier，这就是所谓的支持向量机（Support Vector Machine）。当然，到目前为止，我们的 SVM 还比较弱，只能处理线性的情况，不过，在得到了对偶dual 形式之后，通过 Kernel 推广到非线性的情况就变成了一件非常容易的事情了(相信，你还记得本节开头所说的：“通过求解对偶问题得到最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题”)。\r\n\r\n2.2、核函数Kernel\r\n\r\n2.2.1、特征空间的隐式映射：核函数\r\n\r\n    事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数 κ(⋅,⋅) ，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题\r\n    具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。如图所示，一堆数据在二维空间无法划分，从而映射到三维空间里划分：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113561650552245.1'\/>\r\n\r\n而在我们遇到核函数之前，如果用原始的方法，那么在用线性学习器学习一个非线性关系，需要选择一个非线性特征集，并且将数据写成新的表达形式，这等价于应用一个固定的非线性映射，将数据映射到特征空间，在特征空间中使用线性学习器，因此，考虑的假设集是这种类型的函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113564135734442.JPG'\/>\r\n\r\n 这里ϕ：X->F是从输入空间到某个特征空间的映射，这意味着建立非线性学习器分为两步：\r\n1.首先使用一个非线性映射将数据变换到一个特征空间F，\r\n2.然后在特征空间使用线性学习器分类。\r\n    而由于对偶形式就是线性学习器的一个重要性质，这意味着假设可以表达为训练点的线性组合，因此决策规则可以用测试点和训练点的内积来表示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113568286815734.JPG'\/>\r\n\r\n   如果有一种方式可以在特征空间中直接计算内积〈φ(xi · φ(x)〉，就像在原始输入点的函数中一样，就有可能将两个步骤融合到一起建立一个非线性的学习器，这样直接计算法的方法称为核函数方法：\r\n    核是一个函数K，对所有x，z(-X，满足<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113570386179885.JPG'\/>，这里φ是从X到内积特征空间F的映射。\r\n\r\n2.2.2、核函数：如何处理非线性数据\r\n\r\n    来看个核函数的例子。如下图所示的两类数据，分别分布为两个圆圈的形状，这样的数据本身就是线性不可分的，此时咱们该如何把这两类数据分开呢(下文将会有一个相应的三维空间图)？\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113572316633656.png'\/>\r\n\r\n    事实上，上图所述的这个数据集，是用两个半径不同的圆圈加上了少量的噪音生成得到的，所以，一个理想的分界应该是一个“圆圈”而不是一条线（超平面）。如果用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575187890134.6'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113575873571250.7'\/>来表示这个二维平面的两个坐标的话，我们知道一条二次曲线（圆圈是二次曲线的一种特殊情况）的方程可以写作这样的形式：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113577288726286.8'\/>\r\n\r\n  注意上面的形式，如果我们构造另外一个五维的空间，其中五个坐标的值分别为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146860622115552.1'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146861365715176.2'\/>, <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862073615787.3'\/>,<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146862641999668.4'\/> ，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314686323607707.5'\/>，那么显然，上面的方程在新的坐标系下可以写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146864317224994.6'\/>\r\n\r\n    关于新的坐标<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146865288898709.7'\/>，这正是一个 hyper plane 的方程！也就是说，如果我们做一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146866322594134.8'\/>，将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146867218756231.9'\/> 按照上面的规则映射为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146868761227334.10'\/>，那么在新的空间中原来的数据将变成线性可分的，从而使用之前我们推导的线性分类算法就可以进行处理了。这正是 Kernel 方法处理非线性问题的基本思想。\r\n\r\n    再进一步描述 Kernel 的细节之前，不妨再来看看上述例子在映射过后的直观形态。当然，你我可能无法把 5 维空间画出来，不过由于我这里生成数据的时候用了特殊的情形，所以这里的超平面实际的方程是这个样子的（圆心在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146870264088883.11'\/>轴上的一个正圆）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146871293958976.12'\/>\r\n\r\n    因此我只需要把它映射到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146872425524467.13'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146873140710977.14'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146874179833779.15'\/>这样一个三维空间中即可，下图即是映射之后的结果，将坐标轴经过适当的旋转，就可以很明显地看出，数据是可以通过一个平面来分开的(pluskid：下面的gif 动画，先用 Matlab 画出一张张图片，再用 Imagemagick 拼贴成)：\r\n\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311358438441728.gif'\/>\r\n\r\n 核函数相当于把原来的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113586448630118.jpg'\/>\r\n\r\n映射成：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113588052057306.jpg'\/>\r\n\r\n 而其中的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113593219366653.17'\/>可以通过求解如下 dual 问题而得到的：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113594164302172.jpg'\/>\r\n\r\n这样一来问题就解决了吗？似乎是的：拿到非线性数据，就找一个映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146899942227636.jpg'\/>，然后一股脑把原来的数据映射到新空间中，再做线性 SVM 即可。不过事实上好像并没有这么简单。\r\n\r\n    细想一下，刚才的方法是不是有问题？\r\n\r\n*在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；\r\n\r\n*如果原始空间是三维（一阶、二阶和三阶的组合），那么我们会得到：3(一次)+3(二次交叉)+3(平方)+3(立方)+1(x1*x2*x3)+2*3(交叉，一个一次一个二次，类似x1*x2^2) = 19维的新空间，这个数目是呈指数级爆炸性增长的，从而势必这给<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146903676897892.jpg'\/>的计算带来非常大的困难，而且如果遇到无穷维的情况，就根本无从计算了。\r\n    \r\n这个时候，可能就需要 Kernel 出马了。\r\n\r\n不妨还是从最开始的简单例子出发，设两个向量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146905836789429.jpg'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146906552597573.jpg'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146907651989571.jpg'\/>即是到前面说的五维空间的映射，因此映射过后的内积为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113597910720837.jpg'\/>\r\n\r\n （公式说明：上面的这两个推导过程中，所说的前面的五维空间的映射，这里说的前面便是文中2.2.1节的所述的映射方式，回顾下之前的映射规则，再看那第一个推导，其实就是计算x1，x2各自的内积，然后相乘相加即可，第二个推导则是直接平方，去掉括号，也很容易推出来）\r\n\r\n    另外，我们又注意到：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113600030331255.jpg'\/>\r\n\r\n 二者有很多相似的地方，实际上，我们只要把某几个维度线性缩放一下，然后再加上一个常数维度，具体来说，上面这个式子的计算结果实际上和映射\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113603081253458.jpg'\/>\r\n\r\n 之后的内积<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113606655748460.jpg'\/>的结果是相等的，那么区别在于什么地方呢？\r\n\r\n1.一个是映射到高维空间中，然后再根据内积的公式进行计算；\r\n2.而另一个则直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。\r\n    （公式说明：上面之中，最后的两个式子，第一个算式，是带内积的完全平方式，可以拆开，然后，通过凑一个得到，第二个算式，也是根据第一个算式凑出来的）\r\n\r\n    回忆刚才提到的映射的维度爆炸，在前一种方法已经无法计算的情况下，后一种方法却依旧能从容处理，甚至是无穷维度的情况也没有问题。\r\n\r\n    我们把这里的计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数 (Kernel Function) ，例如，在刚才的例子中，我们的核函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113609272964815.jpg'\/>\r\n\r\n    核函数能简化映射空间中的内积运算——刚好“碰巧”的是，在我们的 SVM 里需要计算的地方数据向量总是以内积的形式出现的。对比刚才我们上面写出来的式子，现在我们的分类函数为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113611824969802.jpg'\/>\r\n\r\n    其中 由如下 dual 问题计算而得：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311361356678410.jpg'\/>\r\n\r\n这样一来计算的问题就算解决了，避开了直接在高维空间中进行计算，而结果却是等价的！当然，因为我们这里的例子非常简单，所以我可以手工构造出对应于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113616184788152.jpg'\/>的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。\r\n\r\n2.2.3、几个核函数\r\n\r\n    通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：\r\n\r\n*多项式核，显然刚才我们举的例子是这里多项式核的一个特例（R = 1，d = 2）。虽然比较麻烦，而且没有必要，不过这个核所对应的映射实际上是可以写出来的，该空间的维度是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314692903446093.jpg'\/>，其中 m 是原始空间的维度。\r\n\r\n*高斯核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146930212664380.jpg'\/>，这个核就是最开始提到过的会将原始空间映射为无穷维空间的那个家伙。不过，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146931574950542.jpg'\/>选得很大的话，高次特征上的权重实际上衰减得非常快，所以实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146933149753340.jpg'\/>选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。不过，总的来说，通过调控参数<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146934290850133.jpg'\/>，高斯核实际上具有相当高的灵活性，也是使用最广泛的核函数之一。下图所示的例子便是把低维线性不可分的数据通过高斯核函数映射到了高维空间：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146935899243629.6'\/>\r\n\r\n*线性核<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146936840628640.jpg'\/>，这实际上就是原始空间中的内积。这个核存在的主要目的是使得“映射后空间中的问题”和“映射前空间中的问题”两者在形式上统一起来了(意思是说，咱们有的时候，写代码，或写公式的时候，只要写个模板或通用表达式，然后再代入不同的核，便可以了，于此，便在形式上统一了起来，不用再分别写一个线性的，和一个非线性的)。\r\n\r\n2.2.4、核函数的本质\r\n\r\n        上面说了这么一大堆，读者可能还是没明白核函数到底是个什么东西？我再简要概括下，即以下三点：\r\n\r\n1.实际中，我们会经常遇到线性不可分的样例，此时，我们的常用做法是把样例特征映射到高维空间中去(如上文2.2节最开始的那幅图所示，映射到高维空间后，相关特征便被分开了，也就达到了分类的目的)；\r\n2.但进一步，如果凡是遇到线性不可分的样例，一律映射到高维空间，那么这个维度大小是会高到可怕的(如上文中19维乃至无穷维的例子)。那咋办呢？\r\n3.此时，核函数就隆重登场了，核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数绝就绝在它事先在低维上进行计算，而将实质上的分类效果表现在了高维上，也就如上文所说的避免了直接在高维空间中的复杂计算。\r\n\r\n    最后引用这里的一个例子举例说明下核函数解决非线性问题的直观效果。\r\n\r\n    假设现在你是一个农场主，圈养了一批羊群，但为预防狼群袭击羊群，你需要搭建一个篱笆来把羊群围起来。但是篱笆应该建在哪里呢？你很可能需要依据牛群和狼群的位置建立一个“分类器”，比较下图这几种不同的分类器，我们可以看到SVM完成了一个很完美的解决方案。\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415311364487862126.04'\/>\r\n\r\n这个例子从侧面简单说明了SVM使用非线性分类器的优势，而逻辑模式以及决策树模式都是使用了直线方法。\r\n\r\n    OK，不再做过多介绍了，对核函数有进一步兴趣的，还可以看看此文。\r\n\r\n2.3、使用松弛变量处理 outliers 方法\r\n\r\n    在本文第一节最开始讨论支持向量机的时候，我们就假定，数据是线性可分的，亦即我们可以找到一个可行的超平面将数据完全分开。后来为了处理非线性数据，在上文2.2节使用 Kernel 方法对原来的线性 SVM 进行了推广，使得非线性的的情况也能处理。虽然通过映射<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113643642824187.jpg'\/>将原始数据映射到高维空间之后，能够线性分隔的概率大大增加，但是对于某些情况还是很难处理。\r\n\r\n    例如可能并不是因为数据本身是非线性结构的，而只是因为数据有噪音。对于这种偏离正常位置很远的数据点，我们称之为 outlier ，在我们原来的 SVM 模型里，outlier 的存在有可能造成很大的影响，因为超平面本身就是只有少数几个 support vector 组成的，如果这些 support vector 里又存在 outlier 的话，其影响就很大了。例如下图：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113648718274875.png'\/>\r\n\r\n用黑圈圈起来的那个蓝点是一个 outlier ，它偏离了自己原本所应该在的那个半空间，如果直接忽略掉它的话，原来的分隔超平面还是挺好的，但是由于这个 outlier 的出现，导致分隔超平面不得不被挤歪了，变成途中黑色虚线所示（这只是一个示意图，并没有严格计算精确坐标），同时 margin 也相应变小了。当然，更严重的情况是，如果这个 outlier 再往右上移动一些距离的话，我们将无法构造出能将数据分开的超平面来。\r\n\r\n    为了处理这种情况，SVM 允许数据点在一定程度上偏离一下超平面。例如上图中，黑色实线所对应的距离，就是该 outlier 偏离的距离，如果把它移动回来，就刚好落在原来的 超平面 蓝色间隔边界上，而不会使得超平面发生变形了。\r\n\r\n    插播下一位读者@Copper_PKU的理解：“换言之，在有松弛的情况下outline点也属于支持向量SV，同时，对于不同的支持向量，拉格朗日参数的值也不同，如此篇论文《Large Scale Machine Learning》中的下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113670860691498.07'\/>\r\n\r\n 对于远离分类平面的点值为0；对于边缘上的点值在[0, 1\/L]之间，其中，L为训练数据集个数，即数据集大小；对于outline数据和内部的数据值为1\/L。更多请参看本文文末参考条目第51条。”\r\n\r\n    OK，继续回到咱们的问题。我们，原来的约束条件为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113672740806615.jpg'\/>\r\n \r\n 现在考虑到outlier问题，约束条件变成了：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113675055302579.jpg'\/>\r\n\r\n    其中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146956575377964.jpg'\/>称为松弛变量 (slack variable) ，对应数据点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146957925299955.jpg'\/>允许偏离的 functional margin 的量。当然，如果我们运行<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146959510570006.jpg'\/>任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146961365750377.jpg'\/>的总和也要最小：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113677133988932.jpg'\/>\r\n\r\n其中 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 是需要优化的变量（之一），而 是一个事先确定好的常量。完整地写出来是这个样子：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113679059653881.jpg'\/>\r\n\r\n用之前的方法将限制或约束条件加入到目标函数中，得到新的拉格朗日函数，如下所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113680998581448.jpg'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113681945665198.png'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113682796899674.jpg'\/>\r\n  \r\n 将  带回 并化简，得到和原来一样的目标函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113684028607150.jpg'\/>\r\n\r\n 不过，由于我们得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146968946115975.jpg'\/>而又有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146969598885480.jpg'\/>（作为 Lagrange multiplier 的条件），因此有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146971396755330.jpg'\/>，所以整个 dual 问题现在写作：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113690078014186.jpg'\/>\r\n\r\n把前后的结果对比一下（错误修正：图中的Dual formulation中的Minimize应为maxmize）：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153113691015859424.019'\/>\r\n\r\n可以看到唯一的区别就是现在 dual variable  <img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146980738558615.png'\/>多了一个上限 。而 Kernel 化的非线性形式也是一样的，只要把<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982186672693.jpg'\/>换成<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153146982726677045.jpg'\/>即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。\r\n\r\n行文至此，可以做个小结，不准确的说，SVM它本质上即是一个分类方法，用w^T+b定义分类函数，于是求w、b，为寻最大间隔，引出1\/2||w||^2，继而引入拉格朗日因子，化为对拉格朗日乘子a的求解（求解过程中会涉及到一系列最优化或凸二次规划等问题），如此，求w.b与求a等价，而a的求解可以用一种快速学习算法SMO，至于核函数，是为处理非线性情况，若直接映射到高维计算恐维度爆炸，故在低维计算，等效高维表现。\r\n\r\nOK，理解到这第二层，已经能满足绝大部分人一窥SVM原理的好奇心，然对于那些想在证明层面理解SVM的则还很不够，但进入第三层理解境界之前，你必须要有比较好的数理基础和逻辑证明能力，不然你会跟我一样，吃不少苦头的。\r\n\r\n\r\n第三层、证明SVM\r\n\r\n    说实话，凡是涉及到要证明的东西.理论，便一般不是怎么好惹的东西。绝大部分时候，看懂一个东西不难，但证明一个东西则需要点数学功底，进一步，证明一个东西也不是特别难，难的是从零开始发明创造这个东西的时候，则显艰难(因为任何时代，大部分人的研究所得都不过是基于前人的研究成果，前人所做的是开创性工作，而这往往是最艰难最有价值的，他们被称为真正的先驱。牛顿也曾说过，他不过是站在巨人的肩上。你，我则更是如此)。\r\n\r\n    正如陈希孺院士在他的著作《数理统计学简史》的第4章、最小二乘法中所讲：在科研上诸多观念的革新和突破是有着很多的不易的，或许某个定理在某个时期由某个人点破了，现在的我们看来一切都是理所当然，但在一切没有发现之前，可能许许多多的顶级学者毕其功于一役，耗尽一生，努力了几十年最终也是无功而返。\r\n\r\n    话休絮烦，要证明一个东西先要弄清楚它的根基在哪，即构成它的基础是哪些理论。OK，以下内容基本是上文中未讲到的一些定理的证明，包括其背后的逻辑、来源背景等东西，还是读书笔记。\r\n\r\n本部分导述\r\n\r\n3.1节线性学习器中，主要阐述感知机算法；\r\n3.2节非线性学习器中，主要阐述mercer定理；\r\n3.3节、损失函数；\r\n3.4节、最小二乘法；\r\n3.5节、SMO算法；\r\n3.6节、简略谈谈SVM的应用；\r\n\r\n3.1、线性学习器\r\n\r\n3.1.1、感知机算法\r\n\r\n    这个感知机算法是1956年提出的，年代久远，依然影响着当今，当然，可以肯定的是，此算法亦非最优，后续会有更详尽阐述。不过，有一点，你必须清楚，这个算法是为了干嘛的：不断的训练试错以期寻找一个合适的超平面(是的，就这么简单)。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153121999813757119.jpg'\/>\r\n下面，举个例子。如下图所示，凭我们的直觉可以看出，图中的红线是最优超平面，蓝线则是根据感知机算法在不断的训练中，最终，若蓝线能通过不断的训练移动到红线位置上，则代表训练成功。\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122001047610479.2'\/>\r\n 既然需要通过不断的训练以让蓝线最终成为最优分类超平面，那么，到底需要训练多少次呢？Novikoff定理告诉我们当间隔是正的时候感知机算法会在有限次数的迭代中收敛，也就是说Novikoff定理证明了感知机算法的收敛性，即能得到一个界，不至于无穷循环下去。\r\n Novikoff定理：如果分类超平面存在, 仅需在序列S上迭代几次，在界为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122002483879649.3'\/>的错误次数下就可以找到分类超平面，算法停止。\r\n\r\n    这里<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004188833672.4'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122004868342400.5'\/>为扩充间隔。根据误分次数公式可知, 迭代次数与对应于扩充(包括偏置)权重的训练集的间隔有关。\r\n    顺便再解释下这个所谓的扩充间隔<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007173107428.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122007980826260.7'\/>即为样本到分类间隔的距离，即从<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220094240218.8'\/>引出的最大分类间隔。OK，还记得上文第1.3节开头的内容么？如下：“\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122010916216277.png'\/>\r\n 在给出几何间隔的定义之前，咱们首先来看下，如上图所示，对于一个点x，令其垂直投影到超平面上的对应的为x0，由于w是垂直于超平面的一个向量，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122013667931954.10'\/>为样本x到分类间隔的距离，我们有\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122015164280076.11'\/>\r\n\r\n然后后续怎么推导出最大分类间隔请回到本文第一、二部分，此处不重复板书。\r\n\r\n同时有一点得注意：感知机算法虽然可以通过简单迭代对线性可分数据生成正确分类的超平面，但不是最优效果，那怎样才能得到最优效果呢，就是上文中第一部分所讲的寻找最大分类间隔超平面。此外，Novikoff定理的证明请见这里。\r\n\r\n3.2、非线性学习器\r\n\r\n3.2.1、Mercer定理\r\n\r\n    Mercer定理 ：如果函数K是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122028964679166.12'\/>上的映射（也就是从两个n维向量映射到实数域）。那么如果K是一个有效核函数（也称为Mercer核函数），那么当且仅当对于训练样例<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122030275031128.13'\/>，其相应的核函数矩阵是对称半正定的。 \r\n    要理解这个Mercer定理，先要了解什么是半正定矩阵，要了解什么是半正定矩阵，先得知道什么是正定矩阵（矩阵理论博大精深，关于矩阵推荐我正在看的一本《矩阵分析与应用》）。然后这里有一个此定理的证明，可以看下。\r\n    正如@Copper_PKU所说：核函数在SVM的分类效果中起了重要的作用，最后这里有个tutorial可以看看。\r\n\r\n3.3、损失函数\r\n\r\n    在本文1.0节有这么一句话“支持向量机(SVM)是90年代中期发展起来的基于统计学习理论的一种机器学习方法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。”但初次看到的读者可能并不了解什么是结构化风险，什么又是经验风险。要了解这两个所谓的“风险”，还得又从监督学习说起。\r\n\r\n    监督学习实际上就是一个经验风险或者结构风险函数的最优化问题。风险函数度量平均意义下模型预测的好坏，模型每一次预测的好坏用损失函数来度量。它从假设空间F中选择模型f作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值Y可能一致也可能不一致，用一个损失函数来度量预测错误的程度。损失函数记为L(Y, f(X))。\r\n\r\n    常用的损失函数有以下几种（基本引用自《统计学习方法》）：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122031928787511.14'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122033166628194.15'\/>\r\n\r\n如此，SVM有第二种理解，即最优化+损失最小，或如@夏粉_百度所说“可从损失函数和优化算法角度看SVM，boosting，LR等算法，可能会有不同收获”。\r\n\r\n    OK，关于更多统计学习方法的问题，请参看此文。\r\n\r\n    关于损失函数，如下文读者评论中所述：可以看看张潼的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n\r\n3.4、最小二乘法\r\n\r\n3.4.1、什么是最小二乘法？\r\n\r\n    既然本节开始之前提到了最小二乘法，那么下面引用《正态分布的前世今生》里的内容稍微简单阐述下。\r\n\r\n    我们口头中经常说：一般来说，平均来说。如平均来说，不吸烟的健康优于吸烟者，之所以要加“平均”二字，是因为凡事皆有例外，总存在某个特别的人他吸烟但由于经常锻炼所以他的健康状况可能会优于他身边不吸烟的朋友。而最小二乘法的一个最简单的例子便是算术平均。\r\n\r\n 最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。用函数表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122050754795762.png'\/>\r\n\r\n 使误差「所谓误差，当然是观察值与实际真实值的差量」平方和达到最小以寻求估计值的方法，就叫做最小二乘法，用最小二乘法得到的估计，叫做最小二乘估计。当然，取平方和作为目标函数只是众多可取的方法之一。\r\n\r\n   最小二乘法的一般形式可表示为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122053034133136.png'\/>\r\n\r\n 有效的最小二乘法是勒让德在 1805 年发表的，基本思想就是认为测量中有误差，所以所有方程的累积误差为\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122054836097497.03'\/>\r\n\r\n我们求解出导致累积误差最小的参数即可：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122056476953911.04'\/>\r\n\r\n  勒让德在论文中对最小二乘法的优良性做了几点说明：\r\n\r\n *最小二乘使得误差平方和最小，并在各个方程的误差之间建立了一种平衡，从而防止某一个极端误差取得支配地位\r\n *计算中只要求偏导后求解线性方程组，计算过程明确便捷\r\n *最小二乘可以导出算术平均值作为估计值\r\n    \r\n对于最后一点，从统计学的角度来看是很重要的一个性质。推理如下：假设真值为<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122059168260991.05'\/>，x1, ... , xn为n次测量值, 每次测量的误差为ei = xi -<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122060191912585.06'\/> ，按最小二乘法，误差累积为\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122064817166315.07'\/>\r\n\r\n  求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122067789775742.08'\/> 使<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531220698768198.09'\/>达到最小，正好是算术平均<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122071640507731.010'\/>。\r\n\r\n    由于算术平均是一个历经考验的方法，而以上的推理说明，算术平均是最小二乘的一个特例，所以从另一个角度说明了最小二乘方法的优良性，使我们对最小二乘法更加有信心。\r\n\r\n    最小二乘法发表之后很快得到了大家的认可接受，并迅速的在数据分析实践中被广泛使用。不过历史上又有人把最小二乘法的发明归功于高斯，这又是怎么一回事呢。高斯在1809年也发表了最小二乘法，并且声称自己已经使用这个方法多年。高斯发明了小行星定位的数学方法，并在数据分析中使用最小二乘方法进行计算，准确的预测了谷神星的位置。\r\n\r\n    说了这么多，貌似跟本文的主题SVM没啥关系呀，别急，请让我继续阐述。本质上说，最小二乘法即是一种参数估计方法，说到参数估计，咱们得从一元线性模型说起。\r\n\r\n3.4.2、最小二乘法的解法\r\n\r\n    什么是一元线性模型呢？ 请允许我引用这里的内容，先来梳理下几个基本概念：\r\n监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。\r\n\r\n回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\r\n\r\n如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\r\n对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面...   \r\n   \r\n 对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 \r\n    \r\n选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：        \r\n用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。\r\n用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。\r\n最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。　 \r\n     \r\n最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小，即采用平方损失函数。 　\r\n     \r\n我们定义样本回归模型为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122081076689191.001'\/>\r\n\r\n其中ei为样本（Xi, Yi）的误差。\r\n    接着，定义平方损失函数Q：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122082790487560.002'\/>\r\n\r\n 则通过Q最小确定这条直线，即确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122084637988555.003'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415312208559322703.004'\/>以为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。\r\n\r\n    求Q对两个待估参数的偏导数：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122086917699894.005'\/>\r\n\r\n 根据数学知识我们知道，函数的极值点为偏导为0的点。   \r\n    解得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122090079174026.006'\/>\r\n\r\n  这就是最小二乘法的解法，就是求得平方损失函数的极值点。自此，你看到求解最小二乘法与求解SVM问题何等相似，尤其是定义损失函数，而后通过偏导求得极值。\r\n\r\n   OK，更多请参看陈希孺院士的《数理统计学简史》的第4章、最小二乘法。\r\n\r\n3.5、SMO算法\r\n\r\n    在上文中，我们提到了求解对偶问题的序列最小最优化SMO算法，但并未提到其具体解法。首先看下最后悬而未决的问题：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122095220427937.jpg'\/>\r\n\r\n  等价于求解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153122096924530732.1-1'\/>\r\n\r\n  1998年，Microsoft Research的John C. Platt在论文《Sequential Minimal Optimization：A Fast Algorithm for Training Support Vector Machines》中提出针对上述问题的解法：SMO算法，它很快便成为最快的二次规划优化算法，特别是在针对线性SVM和数据稀疏时性能更优。\r\n\r\n    接下来，咱们便参考John C. Platt的这篇文章来看看SMO的解法是怎样的。\r\n\r\n3.5.1、SMO算法的推导\r\n\r\n    咱们首先来定义特征到结果的输出函数：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130851211003123.1'\/>\r\n\r\n   注：这个u与我们之前定义的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130853374474857.2'\/>实质是一样的。\r\n\r\n    接着，重新定义下咱们原始的优化问题，权当重新回顾，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130854375580109.3'\/>\r\n    求导得到：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130919710310952.000'\/>\r\n\r\n  代入<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130858687423644.5'\/>中，可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130860154970700.6'\/>。\r\n\r\n    通过引入拉格朗日乘子转换为对偶问题后，得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130862734112719.7'\/>\r\n\r\ns.t：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130864529930496.8'\/>\r\n\r\n且<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130865791545641.9'\/>\r\n\r\n    注：这里得到的min函数与我们之前的max函数实质也是一样，因为把符号变下，即由min转化为max的问题，且yi也与之前的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130868977725728.10'\/>等价，yj亦如此。\r\n\r\n    经过加入松弛变量后，模型修改为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130870348775005.11'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130872182712278.12'\/>\r\n\r\n  从而最终我们的问题变为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130874666355470.13'\/>\r\n\r\n下面要解决的问题是：在<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130876182838856.14'\/>上求上述目标函数的最小值。为了求解这些乘子，每次从中任意抽取两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130877475676634.15'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130879313496229.16'\/>，然后固定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313088012272757.17'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130881931830372.18'\/>以外的其它乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130883777130424.19'\/>，使得目标函数只是关于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130884411167417.20'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130885760744683.21'\/>的函数。这样，不断的从一堆乘子中任意抽取两个求解，不断的迭代求解子问题，最终达到求解原问题的目的。\r\n\r\n    而原对偶问题的子问题的目标函数可以表达为：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130888889766587.22'\/>\r\n \r\n其中\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130891635058418.23'\/>\r\n\r\n    为了解决这个子问题，首要问题便是每次如何选取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130892375797870.24'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313089487002395.25'\/>。实际上，其中一个乘子是违法KKT条件最严重的，另外一个乘子则由另一个约束条件选取。\r\n\r\n    根据KKT条件可以得出目标函数中<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130941596169545.26'\/>取值的意义：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130953136177258.27'\/>\r\n\r\n  这里的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147031450079962.1'\/>还是拉格朗日乘子：\r\n1.对于第1种情况，表明<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147034421489661.2'\/>是正常分类，在间隔边界内部（我们知道正确分类的点<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147035858472621.3'\/>）；\r\n2.对于第2种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147037094045696.4'\/>是支持向量，在间隔边界上；\r\n3.对于第3种情况，表明了<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147038844527020.5'\/>是在两条间隔边界之间；\r\n\r\n    而最优解需要满足KKT条件，即上述3个条件都得满足，以下几种情况出现将会出现不满足：\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147040978713905.6'\/><=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147041893966564.7'\/><C则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147042641936109.8'\/>=C\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147043366433654.9'\/>>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147044598215866.10'\/>>0则是不满足的，而原本<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704606164107.11'\/>=0\r\n*<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147047369500064.12'\/>=1但是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314704832942801.13'\/>=0或者<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147049256289282.14'\/>=C则表明不满足的，而原本应该是0<<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147050719612446.15'\/><C\r\n\r\n也就是说，如果存在不满足KKT条件的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130981359818072.002'\/>，那么需要更新这些<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130982448130572.003'\/>，这是第一个约束条件。此外，更新的同时还要受到第二个约束条件的限制，即\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153130985052322969.004'\/>\r\n\r\n 因此，如果假设选择的两个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314707928327005.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147079864494956.2'\/>，它们在更新之前分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147081421260960.3'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147082539930330.4'\/>，更新之后分别是<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147083647187803.5'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147084382128516.6'\/>，那么更新前后的值需要满足以下等式才能保证和为0的约束：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147085873368716.7'\/>\r\n\r\n    其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147087075119.8'\/>是常数。\r\n    两个因子不好同时求解，所以可先求第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147088578363769.9'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147089565500440.10'\/>），得到<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147090820591524.11'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147092125849370.12'\/>）之后，再用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147093415579953.13'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147095041652368.14'\/>）表示<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096041607106.15'\/>的解（<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147096779240250.16'\/>）。\r\n    为了求解<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147097782019593.17'\/>，得先确定<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147098991300095.18'\/>的取值范围。假设它的上下边界分别为H和L，那么有：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147100267997553.19'\/>\r\n\r\n接下来，综合<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147117926694059.1'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147118695691464.2'\/>这两个约束条件，求取<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147119953968084.3'\/>的取值范围。\r\n\r\n当y1 != y2时，根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147122297844019.4'\/>可得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147123058600033.5'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124257702492.6'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147124875747224.7'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147125994368380.8'\/>\r\n\r\n当y1 = y2时，同样根据<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147127216630893.9'\/>可得：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147128534731147.10'\/>，所以有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415314712985450130.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153147130521260078.12'\/>，如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131021197285156.2'\/>\r\n\r\n   如此，根据y1和y2异号或同号，可得出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase641531310234999019.3'\/>的上下界分别为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313102423563013.4'\/>\r\n\r\n 回顾下第二个约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131026912224470.5'\/>，令上式两边乘以y1，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313103208973126.6'\/>\r\n\r\n其中，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131034238689535.7'\/>。\r\n\r\n    因此<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036036308309.8'\/>可以用<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131036990170633.9'\/>表示，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131038173414714.png'\/>，从而把子问题的目标函数转换为只含<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131039415429022.11'\/>的问题：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131040787442718.12'\/>\r\n\r\n 对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131043466307859.13'\/>求导，可得\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131044776720519.14'\/>\r\n\r\n    化简下：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131046426277629.15'\/>\r\n\r\n 然后将<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131049141850403.png'\/>、<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131050358572157.17'\/>、和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131051630473591.18'\/>代入上式可得：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153131053113681412.19'\/>\r\n\r\n   令<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136274455602585.1'\/>（表示预测值与真实值之差），<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136276634010337.2'\/>，然后上式两边同时除以<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136278127777840.3'\/>，得到一个关于单变量<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136279763537878.4'\/>的解：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136281229036179.5'\/>\r\n\r\n这个解没有考虑其约束条件<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313628414418853.6'\/>，即是未经剪辑时的解。\r\n    然后考虑约束<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136285492600003.7'\/>可得到经过剪辑后的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136287636474065.8'\/>的解析解为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136290434499591.9'\/>\r\n\r\n求出了后<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136293662840181.10'\/>，便可以求出<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313629503014683.11'\/>，得<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136296477284030.12'\/>。\r\n    \r\n那么如何选择乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136298692358307.13'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136299420730847.14'\/>呢？\r\n\r\n对于<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136301570249708.15'\/>，即第一个乘子，可以通过刚刚说的那3种不满足KKT的条件来找；\r\n而对于第二个乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136303810306112.16'\/>可以寻找满足条件：<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136305083919754.17'\/>的乘子。\r\n    \r\n而b在满足下述条件：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136308838214606.18'\/>\r\n\r\n 下更新b：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136310324542754.19'\/>\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136311048594250.20'\/>\r\n\r\n    且每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n    最后更新所有<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313631255288406.21'\/>，y和b，这样模型就出来了，从而即可求出咱们开头提出的分类函数：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136313998057593.jpg'\/>\r\n\r\n    此外，这里也有一篇类似的文章，大家可以参考下。\r\n\r\n3.5.2、SMO算法的步骤\r\n\r\n    综上，总结下SMO的主要步骤，如下：\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136345870927995.png'\/>\r\n\r\n意思是，\r\n\r\n第一步选取一对<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347183632021.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136347887977933.png'\/>，选取方法使用启发式方法；\r\n\r\n第二步，固定除<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136349476480636.png'\/>和<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136350163153652.png'\/>之外的其他参数，确定W极值条件下的<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136352157072445.png'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415313635295426765.png'\/>由<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136353628900492.png'\/>表示。\r\n\r\n    假定在某一次迭代中，需要更新<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136355897297059.9'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136356420352588.10'\/>对应的拉格朗日乘子<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136358459899986.11'\/>，<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136359235892894.12'\/>，那么这个小规模的二次规划问题写为：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136360958291300.13'\/>\r\n\r\n那么在每次迭代中，如何更新乘子呢？引用这里的两张PPT说明下：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136362856862559.14'\/>\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153136363899276926.15'\/>\r\n\r\n知道了如何更新乘子，那么选取哪些乘子进行更新呢？具体选择方法有以下两个步骤：\r\n\r\n步骤1：先“扫描”所有乘子，把第一个违反KKT条件的作为更新对象，令为a1；\r\n步骤2：在所有不违反KKT条件的乘子中，选择使|E1 −E2|最大的a2进行更新，使得能最大限度增大目标函数的值（类似于梯度下降. 此外<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157180572715667.1'\/>，而<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase64153157181347902055.2'\/>，求出来的E代表函数ui对输入xi的预测值与真实输出类标记yi之差）。\r\n\r\n    最后，每次更新完两个乘子的优化后，都需要再重新计算b，及对应的Ei值。\r\n\r\n    综上，SMO算法的基本思想是将Vapnik在1982年提出的Chunking方法推到极致，SMO算法每次迭代只选出两个分量ai和aj进行调整，其它分量则保持固定不变，在得到解ai和aj之后，再用ai和aj改进其它分量。与通常的分解算法比较，尽管它可能需要更多的迭代次数，但每次迭代的计算量比较小，所以该算法表现出较好的快速收敛性，且不需要存储核矩阵，也没有矩阵运算。\r\n\r\n3.5.3、SMO算法的实现\r\n\r\n    行文至此，我相信，SVM理解到了一定程度后，是的确能在脑海里从头至尾推导出相关公式的，最初分类函数，最大化分类间隔，max1\/||w||，min1\/2||w||^2，凸二次规划，拉格朗日函数，转化为对偶问题，SMO算法，都为寻找一个最优解，一个最优分类平面。一步步梳理下来，为什么这样那样，太多东西可以追究，最后实现。如下图所示：\r\n\r\n<img  src='https:\/\/julyedu-img.oss-cn-beijing.aliyuncs.com\/quesbase6415315718331019183.3'\/>\r\n\r\n至于下文中将阐述的核函数则为是为了更好的处理非线性可分的情况，而松弛变量则是为了纠正或约束少量“不安分”或脱离集体不好归类的因子。\r\n\r\n台湾的林智仁教授写了一个封装SVM算法的libsvm库，大家可以看看，此外这里还有一份libsvm的注释文档。\r\n  \r\n除了在这篇论文《fast training of support vector machines using sequential minimal optimization》中platt给出了SMO算法的逻辑代码之外，这里也有一份SMO的实现代码，大家可以看下。\r\n\r\n3.6、SVM的应用\r\n\r\n    或许我们已经听到过，SVM在很多诸如文本分类，图像分类，生物序列分析和生物数据挖掘，手写字符识别等领域有很多的应用，但或许你并没强烈的意识到，SVM可以成功应用的领域远远超出现在已经在开发应用了的领域。\r\n\r\n3.6.1、文本分类\r\n\r\n    一个文本分类系统不仅是一个自然语言处理系统，也是一个典型的模式识别系统，系统的输入是需要进行分类处理的文本，系统的输出则是与文本关联的类别。由于篇幅所限，其它更具体内容本文将不再详述。\r\n\r\n    OK，本节虽取标题为证明SVM，但聪明的读者们想必早已看出，其实本部分并无多少证明部分（特此致歉），怎么办呢？可以参阅《支持向量机导论》一书，此书精简而有趣。本节完。\r\n\r\n读者评论\r\n\r\n   本文发表后，微博上的很多朋友给了不少意见，以下是节选的一些精彩评论：\r\n\r\n1.“压力”陡增的评论→\/\/@藏了个锋：我是看着July大神的博文长大的啊\/\/@zlkysl：就是看了最后那一篇才决定自己的研究方向为SVM的。--http:\/\/weibo.com\/1580904460\/zraWk0u6u?mod=weibotime。\r\n2.@张金辉：“SVM的三重境界，不得不转的一篇。其实Coursera的课堂上Andrew Ng讲过支持向量机，但显然他没有把这作为重点，加上Ng讲支持向量机的方法我一时半会难以完全消化，所以听的也是一知半解。真正开始了解支持向量机就是看的这篇“三重境界”，之后才对这个算法有了大概的概念，以至如何去使用，再到其中的原理为何，再到支持向量机的证明等。总之，这篇文章开启了我长达数月的研究支持向量机阶段，直到今日。”--http:\/\/zhan.renren.com\/profile\/249335584?from=template#!\/\/tag\/三重境界。\r\n3.@孤独之守望者：\"最后，推出svm的cost function 是hinge loss，然后对比其他的方法的cost function，说明其实他们的目标函数很像，那么问题是svm为什么这么popular呢？您可以再加些VC dimension跟一些error bound的数学，点一下，提供一个思路和方向\"。--http:\/\/weibo.com\/1580904460\/AiohoyDwq?mod=weibotime。\r\n\r\n4.@夏粉_百度：“在面试时，考察SVM可考察机器学习各方面能力：目标函数,优化过程,并行方法，算法收敛性,样本复杂度，适用场景,调参经验，不过个人认为考察boosting和LR也还不错啊。此外，随着统计机器学习不断进步，SVM只被当成使用了一个替代01损失hinge研究，更通用的方法被提出，损失函数研究替代损失与贝叶斯损失关系，算法稳定性研究替代损失与推广性能关系,凸优化研究如何求解凸目标函数，SVM,boosting等算法只是这些通用方法的一个具体组建而已。”\r\n5.@居里猴姐：关于SVM损失函数的问题，可以看看张潼老师的这篇《Statistical behavior and consistency of classification methods based on convex risk minimization》。各种算法中常用的损失函数基本都具有fisher一致性，优化这些损失函数得到的分类器可以看作是后验概率的“代理”。此外，张潼老师还有另外一篇论文《Statistical analysis of some multi-category large margin classification methods》，在多分类情况下margin loss的分析，这两篇对Boosting和SVM使用的损失函数分析的很透彻。\r\n6.@夏粉_百度：SVM用了hinge损失，hinge损失不可导，不如其它替代损失方便优化并且转换概率麻烦。核函数也不太用，现在是大数据时代，样本非常大，无法想象一个n^2的核矩阵如何存储和计算。 而且，现在现在非线性一般靠深度学习了。\/\/@Copper_PKU:请教svm在工业界的应用典型的有哪些？工业界如何选取核函数，经验的方法？svm的训练过程如何优化？\r\n\r\n7.@Copper_PKU：July的svm tutorial 我个人觉得还可以加入和修改如下部分：(1) 对于支持向量解释，可以结合图和拉格朗日参数来表达，松弛中sv没有写出来. (2) SMO算法部分，加入Joachims论文中提到的算法，以及SMO算法选取workset的方法，包括SMO算法的收敛判断，还有之前共轭梯度求解方法，虽然是较早的算法，但是对于理解SMO算法有很好的效果。模型的优化和求解都是迭代的过程，加入历史算法增强立体感。--  http:\/\/weibo.com\/1580904460\/Akw6dl3Yk#_rnd1385474436177。\r\n8.\/\/@廖临川: 之所以sgd对大训练集的效果更好，1.因为SGD优化每次迭代使用样本子集，比使用训练全集（尤其是百万数量级）要快得多；2.如果目标函数是凸的或者伪凸的，SGD几乎必然可以收敛到全局最优；否则，则收敛到局部最优；3.SGD一般不需要收敛到全局最优，只要得到足够好的解，就可以立即停止。\/\/@Copper_PKU：sgd的核心思想：是迭代训练，每拿到一个样本就算出基于当前w(t) 的loss function，t代表训练第t次，然后进行下一w（t+1）的更新，w(t+1)=w(t)-(learning rate) * loss function的梯度，这个类比神经网络中bp中的参数训练方法。 sample by sample就是每次仅处理一个样本 而不是一个batch。\r\n9.\/\/@Copper_PKU：从损失函数角度说：primal问题可以理解为正则化项+lossfunction，求解目标是在两个中间取平衡 如果强调loss function最小则会overfitting，所以有C参数。 \/\/@研究者July：SVM还真就是在一定限定条件下，即约束条件下求目标函数的最优值问题，同时，为减少误判率，尽量让损失最小。\r\n\r\n10....\r\n    \r\n非常享受这种全民大讨论的年代，没有谁一定就对或一定就错，而是各自发表各自的理解见解，真棒！\r\n\r\n\r\n参考文献及推荐阅读:\r\n1.《支持向量机导论》，[英] Nello Cristianini \/ John Shawe-Taylor 著；\r\n2.支持向量机导论一书的支持网站：http:\/\/www.support-vector.net\/；\r\n3.《数据挖掘导论》，[美] Pang-Ning Tan \/ Michael Steinbach \/ Vipin Kumar 著；\r\n4.《数据挖掘：概念与技术》，(加)Jiawei Han;Micheline Kamber 著；\r\n5.《数据挖掘中的新方法：支持向量机》，邓乃扬 田英杰 著；\r\n6.《支持向量机--理论、算法和扩展》，邓乃扬 田英杰 著；\r\n7.支持向量机系列，pluskid：http:\/\/blog.pluskid.org\/?page_id=683；\r\n8.http:\/\/www.360doc.com\/content\/07\/0716\/23\/11966_615252.shtml；\r\n9.数据挖掘十大经典算法初探；\r\n10.《模式识别支持向量机指南》，C.J.C Burges 著；\r\n\r\n11.《统计学习方法》，李航著；\r\n12.《统计自然语言处理》，宗成庆编著，第十二章、文本分类；\r\n13.SVM入门系列，Jasper：http:\/\/www.blogjava.net\/zhenandaci\/category\/31868.html；\r\n14.最近邻决策和SVM数字识别的实现和比较，作者不详；\r\n15.纯白板手推SVM：http:\/\/www.julyedu.com\/video\/play\/18\/429\r\n16.斯坦福大学机器学习课程原始讲义：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2012\/05\/08\/2489725.html；\r\n17.斯坦福机器学习课程笔记：http:\/\/www.cnblogs.com\/jerrylead\/tag\/Machine Learning\/；\r\n18.http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/13\/1982639.html；\r\n19.SMO算法的数学推导：http:\/\/www.cnblogs.com\/jerrylead\/archive\/2011\/03\/18\/1988419.html；\r\n20.数据挖掘掘中所需的概率论与数理统计知识、上；\r\n\r\n21.关于机器学习方面的文章，可以读读：http:\/\/www.cnblogs.com\/vivounicorn\/category\/289453.html；\r\n22.数学系教材推荐：http:\/\/blog.sina.com.cn\/s\/blog_5e638d950100dswh.html；\r\n23.《神经网络与机器学习(原书第三版)》，[加] Simon Haykin 著；\r\n24.正态分布的前世今生：http:\/\/t.cn\/zlH3Ygc；\r\n25.《数理统计学简史》，陈希孺院士著；\r\n26.《最优化理论与算法(第2版)》，陈宝林编著；\r\n27.A Gentle Introduction to Support Vector Machines in Biomedicine：http:\/\/www.nyuinformatics.org\/downloads\/supplements\/SVM_Tutorial_2010\/Final_WB.pdf，此PPT很赞，除了对引入拉格朗日对偶变量后的凸二次规划问题的深入度不够之外，其它都挺好，配图很精彩，本文有几张图便引自此PPT中；\r\n28.来自卡内基梅隆大学carnegie mellon university(CMU)的讲解SVM的PPT：http:\/\/www.autonlab.org\/tutorials\/svm15.pdf；\r\n29.发明libsvm的台湾林智仁教授06年的机器学习讲义SVM：http:\/\/wenku.baidu.com\/link?url=PWTGMYNb4HGUrUQUZwTH2B4r8pIMgLMiWIK1ymVORrds_11VOkHwp-JWab7IALDiors64JW_6mD93dtuWHwFWxsAk6p0rzchR8Qh5_4jWHC；\r\n30.http:\/\/staff.ustc.edu.cn\/~ketang\/PPT\/PRLec5.pdf；\r\n\r\n31.Introduction to Support Vector Machines (SVM)，By Debprakash Patnai M.E (SSA)，https:\/\/www.google.com.hk\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http:\/\/www.pws.stu.edu.tw\/ccfang\/index.files\/AI\/AI&ML-Support Vector Machine-1.ppt&ei=JRR6UqT5C-iyiQfWyIDgCg&usg=AFQjCNGw1fTbpH4ltQjjmx1d25ZqbCN9nA；\r\n32.多人推荐过的libsvm：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/libsvm\/；\r\n33.《machine learning in action》，中文版为《机器学习实战》；\r\n34.SMO算法的提出：Sequential Minimal Optimization A Fast Algorithm for Training Support Vector Machines：http:\/\/research.microsoft.com\/en-us\/um\/people\/jplatt\/smoTR.pdf；\r\n35.《统计学习理论的本质》，[美] Vladimir N. Vapnik著，非常晦涩，不做过多推荐；\r\n36.张兆翔，机器学习第五讲之支持向量机http:\/\/irip.buaa.edu.cn\/~zxzhang\/courses\/MachineLearning\/5.pdf；\r\n37.VC维的理论解释：http:\/\/www.svms.org\/vc-dimension\/，中文VC维解释http:\/\/xiaoxia001.iteye.com\/blog\/1163338；\r\n38.来自NEC Labs America的Jason Weston关于SVM的讲义http:\/\/www.cs.columbia.edu\/~kathy\/cs4701\/documents\/jason_svm_tutorial.pdf；\r\n39.来自MIT的SVM讲义：http:\/\/www.mit.edu\/~9.520\/spring11\/slides\/class06-svm.pdf；\r\n40.PAC问题：http:\/\/www.cs.huji.ac.il\/~shashua\/papers\/class11-PAC2.pdf；\r\n\r\n41.百度张潼老师的两篇论文：《Statistical behavior and consistency of classification methods based on convex risk minimization》http:\/\/home.olemiss.edu\/~xdang\/676\/Consistency_of_Classification_Convex_Risk_Minimization.pdf，《Statistical analysis of some multi-category large margin classification methods》；\r\n42.http:\/\/jacoxu.com\/?p=39；\r\n43.《矩阵分析与应用》，清华张贤达著；\r\n44.SMO算法的实现：http:\/\/blog.csdn.net\/techq\/article\/details\/6171688；\r\n45.常见面试之机器学习算法思想简单梳理：http:\/\/www.cnblogs.com\/tornadomeet\/p\/3395593.html；\r\n46.矩阵的wikipedia页面：http:\/\/zh.wikipedia.org\/wiki\/ç©éµ；\r\n47.最小二乘法及其实现：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8248249；\r\n48.统计学习方法概论：http:\/\/blog.csdn.net\/qll125596718\/article\/details\/8351337；\r\n49.http:\/\/www.csdn.net\/article\/2012-12-28\/2813275-Support-Vector-Machine；\r\n50.A Tutorial on Support Vector Regression：http:\/\/alex.smola.org\/papers\/2003\/SmoSch03b.pdf；SVR简明版：http:\/\/www.cmlab.csie.ntu.edu.tw\/~cyy\/learning\/tutorials\/SVR.pdf。\r\n\r\n51.SVM Org：http:\/\/www.support-vector-machines.org\/；\r\n52.R. Collobert. Large Scale Machine Learning. Université Paris VI phd thesis. 2004：http:\/\/ronan.collobert.com\/pub\/matos\/2004_phdthesis_lip6.pdf；\r\n53.Making Large-Scale SVM Learning Practical：http:\/\/www.cs.cornell.edu\/people\/tj\/publications\/joachims_99a.pdf；\r\n54.文本分类与SVM：http:\/\/blog.csdn.net\/zhzhl202\/article\/details\/8197109；\r\n55.Working Set Selection Using Second Order Information\r\nfor Training Support Vector Machines：http:\/\/www.csie.ntu.edu.tw\/~cjlin\/papers\/quadworkset.pdf；\r\n56.SVM Optimization: Inverse Dependence on Training Set Size：http:\/\/icml2008.cs.helsinki.fi\/papers\/266.pdf；\r\n57.Large-Scale Support Vector Machines: Algorithms and Theory：http:\/\/cseweb.ucsd.edu\/~akmenon\/ResearchExam.pdf；\r\n58.凸优化的概念：http:\/\/cs229.stanford.edu\/section\/cs229-cvxopt.pdf；\r\n59.《凸优化》，作者: Stephen Boyd \/ Lieven Vandenberghe，原作名: Convex Optimization；\r\n60.Large-scale Non-linear Classification: Algorithms and Evaluations，Zhuang Wang，讲了很多SVM算法的新进展：http:\/\/ijcai13.org\/files\/tutorial_slides\/te2.pdf；\r\n\r\n61.基于SMO算法实现SVM：http:\/\/www.cs.iastate.edu\/~honavar\/smo-svm.pdf；\r\n62.copper推荐的一些SVM相关的论文（当然，其中不少论文在上面的条目中都已经提到）：http:\/\/c.blog.sina.com.cn\/profile.php?blogid=68d0b92d89000h35；\r\n63.在线编辑Latex 公式：http:\/\/www.codecogs.com\/latex\/eqneditor.php?lang=zh-cn。\r\n\r\n\r\n后记\r\n    OK，此文从最初2012年5月开始动笔，到后续不断的修改，创造了三个之最，即所写时间最长，所花心血最大，所改次数最多，因为我的目标是让没有任何机器学习基础的都能看懂此文，所以总是不停的改，不停的改，不想放过任何一个小的细节。再者，引用侯捷的一句话是：天下大作，必作于细。\r\n\r\n    最后，非常感谢pluskid及诸多朋友们的文章及著作，让我有机会在其基础上总结、深入。有任何问题，敬请广大读者随时不吝批评指正，感谢。\r\n\r\n\r\n本文PDF版\r\n*13年11月25日，用chrome浏览器打开文章，右键打印，弹出打印框，把左上角的目标更改为“另存为PDF”，成第一个PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKghu5V。\r\n*13年12月7日，朋友吴新隆用“印象笔记”提取出博客正文，放到office内编辑成此PDF：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgQHm8，较上一版本添加了完整的书签。\r\n*14年 2月18日，朋友邬书哲用Latex全部重排了本文所有公式，而且给所有公式和图片全部做了标记，Latex版PDF下载地址为：http:\/\/vdisk.weibo.com\/s\/zrFL6OXKgnlcp。\r\n*15年1月8日，朋友陈笙再为本SVM一文弄了最新的第二个LaTeX版本，下载地址为：http:\/\/pan.baidu.com\/s\/1eQrgiOU。\r\n\r\n    本文会一直不断翻新，再者，上述 4 个PDF的阅读体验也还不是最好的，如果有朋友制作了更好的PDF，欢迎分享给我：http:\/\/weibo.com\/julyweibo，谢谢。\r\n\r\n    July、二零一六年一月十七日第N次修改（N > 100）。\r\n","type_id":3,"diff":0,"isdelete":1,"created_time":"2017-12-10 18:57:21","update_time":"2018-09-09 12:57:24","is_show":1,"is_coll":0},"list":[{"is_coll":0,"is_done":0,"ques_id":919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":922,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":923,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":926,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":927,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":929,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":930,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":934,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":941,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":943,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":944,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":955,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":960,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":961,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":965,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":966,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":967,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":970,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":976,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":978,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":979,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":983,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":986,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":987,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":988,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":989,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":990,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":991,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":992,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":993,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":994,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":995,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":997,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1001,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1002,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1004,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1005,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1006,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1007,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1008,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1009,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1011,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1012,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1017,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1020,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1037,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1041,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1042,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1043,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1045,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1046,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1047,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1050,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1051,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1052,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1053,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1054,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1056,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1058,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1061,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1066,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1225,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1366,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1368,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1524,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1530,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1531,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1550,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1553,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1566,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1567,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1571,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1572,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1573,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1698,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1699,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1700,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1701,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1702,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":1703,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2076,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2077,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2078,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2079,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2080,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2107,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2116,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2117,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2119,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2120,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2142,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2380,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2381,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2382,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2383,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2385,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2386,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2388,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2390,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2391,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2392,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2393,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2394,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2395,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2396,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2397,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2398,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2399,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2401,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2402,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2403,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2404,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2406,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2407,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2408,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2409,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2410,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2411,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2412,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2413,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2533,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2568,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2569,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2584,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2586,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2587,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2590,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2591,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2595,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2600,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2601,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2602,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2603,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2604,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2662,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2663,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2708,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2709,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2907,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2908,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2914,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2916,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2917,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2919,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":2982,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3145,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3146,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3147,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3148,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3149,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3150,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3151,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3152,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3153,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3154,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3155,"category_id":"23"},{"is_coll":0,"is_done":0,"ques_id":3156,"category_id":"23"}]}